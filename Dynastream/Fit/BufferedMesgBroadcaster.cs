#region Copyright
////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2017 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 20.54Release
// Tag = production/akw/20.54.00-0-ga49a69a
////////////////////////////////////////////////////////////////////////////////

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.IO;

using Dynastream.Utility;
using Dynastream.Fit;

namespace Dynastream.Fit
{
    public delegate void MessageBroadcastEventHandler(object sender, MessageBroadcastEventArgs e);
    public delegate void IncomingMessageEventHandler(object sender, IncomingMessageEventArgs e);

    public class MessageBroadcastEventArgs : EventArgs
    {
        public List<Message> mesgs = null;

        public MessageBroadcastEventArgs()
        {
        }

        public MessageBroadcastEventArgs(List<Message> newMessages)
        {
            mesgs = newMessages;
        }
    }

    public class IncomingMessageEventArgs : EventArgs
    {
        public Message mesg = null;

        public IncomingMessageEventArgs()
        {
        }

        public IncomingMessageEventArgs(Message newMessage)
        {
            mesg = new Message(newMessage);
        }
    }

    /// <summary>
    /// <para>
    /// BufferedMessageBroadcaster intercepts the incoming messages
    /// from the given decode stream, buffers them, and offers
    /// an opportunity to edit the messages before broadcasting
    /// the messages to all registered listeners.
    /// </para>
    /// <para>
    /// To edit the messages, an IMessageBroadcastPlugin must be
    /// registered. All registered IMessageBroadcastPlugins are given
    /// the opportunity to see each message as they are decoded,
    /// as well as to see and edit the final list of
    /// messages before broadcast to listeners
    /// </para>
    /// </summary>
    public class BufferedMessageBroadcaster : MessageBroadcaster
    {
        #region Fields
        private List<Message> mesgs = new List<Message>();
        public event MessageBroadcastEventHandler MessageBroadcastEvent;
        public event IncomingMessageEventHandler IncomingMessageEvent;
        #endregion

        #region Methods

        public void RegisterMessageBroadcastPlugin(IMessageBroadcastPlugin plugin)
        {
            MessageBroadcastEvent += plugin.OnBroadcast;
            IncomingMessageEvent += plugin.OnIncomingMessage;
        }

        public new void OnMessage(object sender, MessageEventArgs e)
        {
            // Notify any subscribers of either our general mesg event or specific profile mesg event
            mesgs.Add(e.Message);
            if (IncomingMessageEvent != null)
            {
                IncomingMessageEvent(sender, new IncomingMessageEventArgs(e.Message));
            }
        }

        public void Broadcast()
        {
            if (MessageBroadcastEvent != null)
            {
                MessageBroadcastEvent(this, new MessageBroadcastEventArgs(mesgs));
            }

            foreach (Message mesg in mesgs)
            {
                base.OnMessage(this, new MessageEventArgs(mesg));
            }

        }
        #endregion
    }
} // namespace
